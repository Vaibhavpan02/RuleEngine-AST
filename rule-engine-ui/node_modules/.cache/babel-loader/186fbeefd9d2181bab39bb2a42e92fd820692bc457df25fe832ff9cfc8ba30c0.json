{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\Rule-Engine-AST-main-task\\\\Rule-Engine-AST-main\\\\rule-engine-ui\\\\src\\\\components\\\\RuleForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = 'http://localhost:3001';\nconst RuleForm = () => {\n  _s();\n  const [rule, setRule] = useState('');\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const validateRule = ruleString => {\n    // Expression to match valid comparison expressions\n    const comparisonRegex = /(\\w+\\s*(>|<|=|>=|<=|!=)\\s*[\"']?\\w+[\"']?)/;\n    const comparisons = ruleString.match(comparisonRegex);\n    if (!comparisons || comparisons.length === 0) {\n      return false;\n    }\n\n    // Checking for balanced parentheses\n    const parenthesisBalanced = (ruleString.match(/\\(/g) || []).length === (ruleString.match(/\\)/g) || []).length;\n    if (!parenthesisBalanced) {\n      return false;\n    }\n    const logicalOperatorsRegex = /\\s+(AND|OR)\\s+/;\n    const hasLogicalOperators = logicalOperatorsRegex.test(ruleString);\n    return hasLogicalOperators || comparisons.length === 1;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n\n    // Validate rule format\n    if (!validateRule(rule)) {\n      setError('Invalid rule format. Ensure it contains valid comparisons.');\n      return;\n    }\n    try {\n      const response = await axios.post(`${BASE_URL}/api/rules/create`, {\n        ruleString: rule\n      });\n      setSuccessMessage('Rule created successfully!');\n      console.log('Rule created:', response.data);\n    } catch (error) {\n      if (error.response) {\n        setError(`Error: ${error.response.data.message || 'Something went wrong'}`);\n      } else if (error.request) {\n        setError('Error: No response from the server');\n      } else {\n        setError(`Error: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Rule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Rule:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: rule,\n          onChange: e => setRule(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(RuleForm, \"B+7jSwi051GEgDS7P0azegpM0Mw=\");\n_c = RuleForm;\nexport default RuleForm;\nvar _c;\n$RefreshReg$(_c, \"RuleForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","BASE_URL","RuleForm","_s","rule","setRule","error","setError","successMessage","setSuccessMessage","validateRule","ruleString","comparisonRegex","comparisons","match","length","parenthesisBalanced","logicalOperatorsRegex","hasLogicalOperators","test","handleSubmit","e","preventDefault","response","post","console","log","data","message","request","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Downloads/Rule-Engine-AST-main-task/Rule-Engine-AST-main/rule-engine-ui/src/components/RuleForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst BASE_URL = 'http://localhost:3001';\n\nconst RuleForm = () => {\n  const [rule, setRule] = useState('');\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const validateRule = (ruleString) => {\n    // Expression to match valid comparison expressions\n    const comparisonRegex = /(\\w+\\s*(>|<|=|>=|<=|!=)\\s*[\"']?\\w+[\"']?)/;\n  \n    const comparisons = ruleString.match(comparisonRegex);\n  \n    if (!comparisons || comparisons.length === 0) {\n      return false;\n    }\n  \n    // Checking for balanced parentheses\n    const parenthesisBalanced = (ruleString.match(/\\(/g) || []).length === (ruleString.match(/\\)/g) || []).length;\n    if (!parenthesisBalanced) {\n      return false;\n    }\n  \n    const logicalOperatorsRegex = /\\s+(AND|OR)\\s+/;\n    const hasLogicalOperators = logicalOperatorsRegex.test(ruleString);\n  \n    return hasLogicalOperators || comparisons.length === 1;\n  };\n  \n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n\n    // Validate rule format\n    if (!validateRule(rule)) {\n      setError('Invalid rule format. Ensure it contains valid comparisons.');\n      return;\n    }\n\n    try {\n      const response = await axios.post(`${BASE_URL}/api/rules/create`, { ruleString: rule });\n      setSuccessMessage('Rule created successfully!');\n      console.log('Rule created:', response.data);\n    } catch (error) {\n      if (error.response) {\n        setError(`Error: ${error.response.data.message || 'Something went wrong'}`);\n      } else if (error.request) {\n        setError('Error: No response from the server');\n      } else {\n        setError(`Error: ${error.message}`);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h2>Create Rule</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Rule:</label>\n          <input \n            type=\"text\" \n            value={rule} \n            onChange={(e) => setRule(e.target.value)} \n          />\n        </div>\n        <button type=\"submit\">Create Rule</button>\n      </form>\n      {error && (\n        <p style={{ color: 'red' }}>{error}</p>\n      )}\n      {successMessage && (\n        <p style={{ color: 'green' }}>{successMessage}</p>\n      )}\n    </div>\n  );\n};\n\nexport default RuleForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}